/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.bensivo.otel.tracing;

import java.util.ArrayList;
import java.util.List;

import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Context;
import io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;
import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.common.CompletableResultCode;
import io.opentelemetry.sdk.resources.Resource;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import io.opentelemetry.sdk.trace.SpanProcessor;
import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;
import io.opentelemetry.sdk.trace.export.SpanExporter;
import io.opentelemetry.semconv.ResourceAttributes;

public class OtelTracer {

    private String serviceName;
    private String serviceVersion;

    private OpenTelemetry otel;
    private SpanExporter spanExporter;
    private SpanProcessor spanProcessor;

    public OtelTracer(String serviceName, String serviceVersion) {
        this.serviceName = serviceName;
        this.serviceVersion = serviceVersion;
    }

    public void initialize() {
        this.spanExporter = OtlpHttpSpanExporter.builder()
                .setEndpoint("http://localhost:4318/v1/traces")
                .build();

        this.spanProcessor = BatchSpanProcessor.builder(spanExporter)
                .build();

        Resource resource = Resource.getDefault().toBuilder()
                .put(ResourceAttributes.SERVICE_NAME, this.serviceName)
                .put(ResourceAttributes.SERVICE_VERSION, this.serviceVersion)
                .build();

        SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder()
                .addSpanProcessor(spanProcessor)
                .setResource(resource)
                .build();

        this.otel = OpenTelemetrySdk.builder()
                .setTracerProvider(sdkTracerProvider)
                // .setPropagators(ContextPropagators.create(TextMapPropagator.composite(W3CTraceContextPropagator.getInstance(),
                // W3CBaggagePropagator.getInstance())))
                .buildAndRegisterGlobal();
    }

    private Tracer getTracer() {
        return this.otel.getTracer(this.serviceName, this.serviceVersion);
    }

    public Span span(String name) {
        // TODO: add options for different span attributes
        return this.getTracer().spanBuilder(name).startSpan();
    }

    public Span span(String name, Context parentContext) {
        // TODO: add options for different span attributes
        return this.getTracer().spanBuilder(name)
                .setParent(parentContext)
                .startSpan();
    }

    public Context context(Span span) {
        return span.storeInContext(Context.root());

    }

    public Context context(Span span, Context parentContext) {
        return span.storeInContext(parentContext);
    }

    public CompletableResultCode flush() {
        CompletableResultCode processorFlush = this.spanProcessor.forceFlush();
        CompletableResultCode exporterFlush = this.spanExporter.flush();

        List<CompletableResultCode> codes = new ArrayList<>();
        codes.add(processorFlush);
        codes.add(exporterFlush);

        return CompletableResultCode.ofAll(codes);
    }

}
